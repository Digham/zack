Instructions always 1 word (2 bytes), sometimes followed by an immediate word.
First word:
+---------------------------------------------------------------+
|15 |14 |13 |12 |11 |10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
|---------------------------|-----------|-----------|-----------|
|        instruction        |    dest   |   src 1   |   src 2   |
|       -> decode ROM       |  (Z bus)  |  (X bus)  |  (Y bus)  |
+---------------------------------------------------------------+

Instruction bits (hex): Meaning - Explanation
---------------------------------------------
Note: src1, src2 and dest refer to registers given in the instruction, as above

00: NOP
01: HLT
08: LDI dest, imm - load immediate value into dest register
09: LDAI dest, address[imm] - load value at immediate address into register
0A: STI src2, address[imm] - store value in register at immediate address in memory
11: LDA dest, address[src2] - load value pointed to by src2 into dest
12: STO src2, address[src1] - store value in src2 at the address referenced by src1
13: PUSH src2 - push value of src2 onto stack
14: MOV dest, src1 - copy value of src1 into dest

18: ADD - add and the six instructions below are tertiary, so here dest := src1 + src2
19: SUB
1A: AND
1B: OR
1C: NAND
1D: NOR
1E: XOR
1F: CMP src1, src2 (dest not affected, but flags set)
20: INC (src1+1 -> dest)
21: DEC (src1-1 -> dest)
22: NEG (-src2 -> dest; 2's complement)
23: INV (~src2 -> dest; bitwise NOT)

28: REM (result -> D; upper half <- D) (the modulus operator)
29: MULC (cin <- D; upper half -> D)
2A: DIVD (upper half <- D)
2B: DIVC (quotient->dest; rem->D; upper half of dividend <- D)
2C: MUL (discard upper half)
2D: DIV (no upper half)
30: SHL - bitwise shifts are also tertiary, so here dest := src1 << src2
31: SHR
32: SAR
33: ROL
34: ROR

The conditional jumps below check flags that were set by a previous instruction (similar to x86 architecture)
60: JMPI imm - jump execution / set program counter to immediate address
61: JZI imm - jump if zero
62: JNZI imm - conditional jumps...
63: JGI imm  \ signed
64: JLI imm  /
65: JAI imm  \ unsigned
66: JBI imm  /
68: JMP src2 - jump execution / set program counter to address in register
69: JZ src2
6A: JNZ src2
6B: JG src2  \ signed
6C: JL src2  /
6D: JA src2  \ unsigned
6E: JB src2  /

78: CALL imm - function call (push program counter to stack and jump to imm address)
79: RET - return from function call (pop program counter from stack)
7A: CALLR src2 - function call with function address from a register
7B: POP dest - pop value from top of stack into register (dest := [SP]; SP++)
